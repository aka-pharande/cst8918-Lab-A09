name: Validate terraform fmt
on:
  pull_request:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

jobs:
  format:
    runs-on: ubuntu-latest
    name: terraform fmt check
    steps:
      - uses: actions/checkout@v3

      - name: Fetch changed files
        id: pr_files
        uses: jitterbit/get-changed-files@v1
        with:
          format: "space-delimited"

      - name: Configure terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          
      - name: Validate terraform fmt
        run: |
          EXIT_CODE=0
          CHANGED_FILES="${{ steps.pr_files.outputs.added_modified }}"
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No changed Terraform files detected. Checking all .tf files..."
            CHANGED_FILES=$(find . -type f -name "*.tf")
          fi

          for file in $CHANGED_FILES; do
            echo "Checking terraform fmt on ${file}..."
            if [ -f "$file" ] && ! terraform fmt -check "$file"; then
              echo "::error::❌ Terraform formatting failed for ${file}"
              EXIT_CODE=1
            fi
          done

          exit $EXIT_CODE

  validate:
    runs-on: ubuntu-latest
    name: terraform validate
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          
      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init -backend=false
        
      - name: Terraform Validate
        working-directory: ./infrastructure
        run: |
          if ! terraform validate; then
            echo "::error::❌ Terraform validation failed"
            exit 1
          fi
